services:
  app:
    image: ${DOCKER_COMPOSE_IMAGE_NAME}
    container_name: "${NAME}"
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
    ports:
      - "127.0.0.1:${DOCKER_PORT}:80"
    env_file:
      - .env
    networks:
      - default
    logging:
      driver: "awslogs"
      options:
        awslogs-region: "us-east-1"
        awslogs-group: "${AWS_LOG_GROUP}"
        awslogs-create-group: "true"
        tag: "${AWS_LOG_GROUP}"

  postgres:
    image: "postgres:alpine3.19"
    container_name: "${NAME}-postgres"
    restart: always
    environment:
      - "POSTGRES_USER=${DATABASE_USER}"
      - "POSTGRES_PASSWORD=${DATABASE_PASSWORD}"
      - "POSTGRES_DB=${DATABASE_NAME}"
    volumes:
      - postgres:/var/lib/postgresql/data
    networks:
      - default
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${DATABASE_USER} -d ${DATABASE_NAME} -h localhost -p 5432" ]
      start_period: 5s
      interval: 10s
      timeout: 5s

networks:
  default:
    name: "${NAME}-backend"
    driver: bridge

volumes:
  postgres:
    name: "${NAME}-postgres"
  pgadmin_data:
    name: "${NAME}-pgadmin"

